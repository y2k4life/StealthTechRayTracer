// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace StealthTech.RayTracer.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CubesFeature : Xunit.IClassFixture<CubesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Cubes.feature"
#line hidden
        
        public CubesFeature(CubesFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Cubes", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute(DisplayName="A ray intersects a cube")]
        [Xunit.TraitAttribute("FeatureTitle", "Cubes")]
        [Xunit.TraitAttribute("Description", "A ray intersects a cube")]
        [Xunit.InlineDataAttribute("+x", "Point(5, 0.5, 0)", "Vector(-1, 0, 0)", "4", "6", new string[0])]
        [Xunit.InlineDataAttribute("-x", "Point(-5, 0.5, 0)", "Vector(1, 0, 0)", "4", "6", new string[0])]
        [Xunit.InlineDataAttribute("+y", "Point(0.5, 5, 0)", "Vector(0, -1, 0)", "4", "6", new string[0])]
        [Xunit.InlineDataAttribute("-y", "Point(0.5, -5, 0)", "Vector(0, 1, 0)", "4", "6", new string[0])]
        [Xunit.InlineDataAttribute("+z", "Point(0.5, 0, 5)", "Vector(0, 0, -1)", "4", "6", new string[0])]
        [Xunit.InlineDataAttribute("-z", "Point(0.5, 0, -5)", "Vector(0, 0, 1)", "4", "6", new string[0])]
        [Xunit.InlineDataAttribute("inside", "Point(0, 0.5, 0)", "Vector(0, 0, 1)", "-1", "1", new string[0])]
        public virtual void ARayIntersectsACube(string index, string origin, string direction, string t1, string t2, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ray intersects a cube", null, exampleTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
 testRunner.Given("cube ← Cube()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.And(string.Format("ray ← Ray({0}, {1})", origin, direction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 6
 testRunner.When("intersections ← cube.LocalIntersect(ray)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
 testRunner.Then("intersections.Count = 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 8
 testRunner.And(string.Format("intersections[0].Time = {0}", t1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.And(string.Format("intersections[1].Time = {0}", t2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="A ray misses a cube")]
        [Xunit.TraitAttribute("FeatureTitle", "Cubes")]
        [Xunit.TraitAttribute("Description", "A ray misses a cube")]
        [Xunit.InlineDataAttribute("Point(-2, 0, 0)", "Vector(0.2673, 0.5345, 0.8018)", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, -2, 0)", "Vector(0.8018, 0.2673, 0.5345)", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, 0, -2)", "Vector(0.5345, 0.8018, 0.2673)", new string[0])]
        [Xunit.InlineDataAttribute("Point(2, 0, 2)", "Vector(0, 0, -1)", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, 2, 2)", "Vector(0, -1, 0)", new string[0])]
        [Xunit.InlineDataAttribute("Point(2, 2, 0)", "Vector(-1, 0, 0)", new string[0])]
        public virtual void ARayMissesACube(string origin, string direction, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ray misses a cube", null, exampleTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 22
 testRunner.Given("cube ← Cube()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.And(string.Format("ray ← Ray({0}, {1})", origin, direction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.When("intersections ← cube.LocalIntersect(ray)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.Then("intersections.Count = 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CubesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CubesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
