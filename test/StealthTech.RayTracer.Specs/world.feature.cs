// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace StealthTech.RayTracer.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class WorldFeature : Xunit.IClassFixture<WorldFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "world.feature"
#line hidden
        
        public WorldFeature(WorldFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "world", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Creating a world")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "Creating a world")]
        public virtual void CreatingAWorld()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating a world", null, ((string[])(null)));
#line 3
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
 testRunner.Given("world ← World()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.Then("world contains no shapes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 6
 testRunner.And("world has no light source", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The default world")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "The default world")]
        public virtual void TheDefaultWorld()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The default world", null, ((string[])(null)));
#line 8
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
 testRunner.Given("light ← PointLight(Point(-10, 10, -10), Color(1, 1, 1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "material.color",
                        "(0.8, 1.0, 0.6)"});
            table17.AddRow(new string[] {
                        "material.diffuse",
                        "0.7"});
            table17.AddRow(new string[] {
                        "material.specular",
                        "0.2"});
#line 10
 testRunner.And("sphere1 ← sphere() with:", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "transform",
                        "scaling(0.5, 0.5, 0.5)"});
#line 14
 testRunner.And("sphere2 ← sphere() with:", ((string)(null)), table18, "And ");
#line 16
 testRunner.When("world ← default_world()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("world.Light = light", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
 testRunner.And("world contains sphere1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.And("world contains sphere2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Intersect a world with a ray")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "Intersect a world with a ray")]
        public virtual void IntersectAWorldWithARay()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Intersect a world with a ray", null, ((string[])(null)));
#line 21
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 22
 testRunner.Given("world ← default_world()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.And("ray ← Ray(Point(0, 0, -5), Vector(0, 0, 1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.When("intersections ← intersect_world(w, r)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.Then("intersections.Count = 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
 testRunner.And("intersections[0].Time = 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.And("intersections[1].Time = 4.5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.And("intersections[2].Time = 5.5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.And("intersections[3].Time = 6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Shading an intersection")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "Shading an intersection")]
        public virtual void ShadingAnIntersection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Shading an intersection", null, ((string[])(null)));
#line 31
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 32
 testRunner.Given("world ← default_world()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.And("ray ← Ray(Point(0, 0, -5), Vector(0, 0, 1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And("sphere ← the first shape in world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And("intersection ← Intersection(4, sphere)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.When("computations ← intersection.PrepareComputations(ray)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.And("color ← world.ShadeHit(computations, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.Then("color = Color(0.38066, 0.47583, 0.2855)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Shading an intersection from the inside")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "Shading an intersection from the inside")]
        public virtual void ShadingAnIntersectionFromTheInside()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Shading an intersection from the inside", null, ((string[])(null)));
#line 40
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 41
 testRunner.Given("world ← default_world()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
 testRunner.And("world.Light ← PointLight(Point(0, 0.25, 0), Color(1, 1, 1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("ray ← Ray(Point(0, 0, 0), Vector(0, 0, 1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And("sphere ← the second shape in world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And("intersection ← Intersection(0.5, sphere)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.When("computations ← intersection.PrepareComputations(ray)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
 testRunner.And("color ← world.ShadeHit(computations, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.Then("color = Color(0.90498, 0.90498, 0.90498)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The color when a ray misses")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "The color when a ray misses")]
        public virtual void TheColorWhenARayMisses()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The color when a ray misses", null, ((string[])(null)));
#line 50
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 51
 testRunner.Given("world ← default_world()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
 testRunner.And("ray ← Ray(Point(0, 0, -5), Vector(0, 1, 0))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.When("color ← color_at(w, r)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.Then("color = Color(0, 0, 0)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The color when a ray hits")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "The color when a ray hits")]
        public virtual void TheColorWhenARayHits()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The color when a ray hits", null, ((string[])(null)));
#line 56
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 57
 testRunner.Given("world ← default_world()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 58
 testRunner.And("ray ← Ray(Point(0, 0, -5), Vector(0, 0, 1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
 testRunner.When("color ← color_at(w, r)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
 testRunner.Then("color = Color(0.38066, 0.47583, 0.2855)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The color with an intersection behind the ray")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "The color with an intersection behind the ray")]
        public virtual void TheColorWithAnIntersectionBehindTheRay()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The color with an intersection behind the ray", null, ((string[])(null)));
#line 62
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 63
 testRunner.Given("world ← default_world()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 64
 testRunner.And("outerShape ← the first shape in world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.And("outerShape.Material.Ambient ← 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.And("innerShape ← the second shape in world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.And("inner.material.ambient ← 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.And("ray ← Ray(Point(0, 0, 0.75), Vector(0, 0, -1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.When("color ← color_at(w, r)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then("color = inner.Material.Color", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="shade_hit() is given an intersection in shadow")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "shade_hit() is given an intersection in shadow")]
        public virtual void Shade_HitIsGivenAnIntersectionInShadow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("shade_hit() is given an intersection in shadow", null, ((string[])(null)));
#line 92
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 93
 testRunner.Given("world ← World()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 94
 testRunner.And("world.Light ← PointLight(Point(0, 0, -10), Color(1, 1, 1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.And("sphere ← Sphere()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.And("sphere is added to world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "transform",
                        "translation(0, 0, 10)"});
#line 97
 testRunner.And("sphere2 ← sphere() with:", ((string)(null)), table19, "And ");
#line 99
 testRunner.And("sphere2 is added to world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
 testRunner.And("ray ← Ray(Point(0, 0, 5), Vector(0, 0, 1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.And("intersection ← Intersection(4, sphere2)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.When("computations ← intersection.PrepareComputations(ray)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 103
 testRunner.And("color ← world.ShadeHit(computations, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
 testRunner.Then("color = Color(0.1, 0.1, 0.1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The reflected color for a nonreflective material")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "The reflected color for a nonreflective material")]
        public virtual void TheReflectedColorForANonreflectiveMaterial()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The reflected color for a nonreflective material", null, ((string[])(null)));
#line 106
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 107
 testRunner.Given("world ← default_world()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 108
 testRunner.And("ray ← Ray(Point(0, 0, 0), Vector(0, 0, 1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
 testRunner.And("sphere ← the second shape in world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
 testRunner.And("sphere.Material.Ambient ← 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
 testRunner.And("intersection ← Intersection(1, sphere)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
 testRunner.When("computations ← intersection.PrepareComputations(ray)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 113
 testRunner.And("color ← world.ReflectedColor(computations)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
 testRunner.Then("color = Color(0, 0, 0)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The reflected color for a reflective material")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "The reflected color for a reflective material")]
        public virtual void TheReflectedColorForAReflectiveMaterial()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The reflected color for a reflective material", null, ((string[])(null)));
#line 116
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 117
 testRunner.Given("world ← default_world()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "material.reflective",
                        "0.5"});
            table20.AddRow(new string[] {
                        "transform",
                        "translation(0, -1, 0)"});
#line 118
 testRunner.And("plane ← Plane() with:", ((string)(null)), table20, "And ");
#line 121
 testRunner.And("plane is added to world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
 testRunner.And("ray ← Ray(Point(0, 0, -3), Vector(0, -√2/2, √2/2))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
 testRunner.And("intersection ← Intersection(√2, plane)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
 testRunner.When("computations ← intersection.PrepareComputations(ray)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 125
 testRunner.And("color ← world.ReflectedColor(computations)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
 testRunner.Then("color = Color(0.19032, 0.2379, 0.14274)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="shade_hit() with a reflective material")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "shade_hit() with a reflective material")]
        public virtual void Shade_HitWithAReflectiveMaterial()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("shade_hit() with a reflective material", null, ((string[])(null)));
#line 128
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 129
 testRunner.Given("world ← default_world()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "material.reflective",
                        "0.5"});
            table21.AddRow(new string[] {
                        "transform",
                        "translation(0, -1, 0)"});
#line 130
 testRunner.And("plane ← Plane() with:", ((string)(null)), table21, "And ");
#line 133
 testRunner.And("plane is added to world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
 testRunner.And("ray ← Ray(Point(0, 0, -3), Vector(0, -√2/2, √2/2))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 135
 testRunner.And("intersection ← Intersection(√2, plane)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 136
 testRunner.When("computations ← intersection.PrepareComputations(ray)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 137
 testRunner.And("color ← world.ShadeHit(computations, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
 testRunner.Then("color = Color(0.87677, 0.92436, 0.82918)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="color_at() with mutually reflective surfaces")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "color_at() with mutually reflective surfaces")]
        public virtual void Color_AtWithMutuallyReflectiveSurfaces()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("color_at() with mutually reflective surfaces", null, ((string[])(null)));
#line 140
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 141
 testRunner.Given("world ← default_world()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 142
 testRunner.And("light ← PointLight(Point(0, 0, 0), Color(1, 1, 1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "material.reflective",
                        "1"});
            table22.AddRow(new string[] {
                        "transform",
                        "translation(0, -1, 0)"});
#line 143
 testRunner.And("lowerPlane ← Plane() with:", ((string)(null)), table22, "And ");
#line 146
 testRunner.And("lowerPlane is added to world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "material.reflective",
                        "1"});
            table23.AddRow(new string[] {
                        "transform",
                        "translation(0, 1, 0)"});
#line 147
 testRunner.And("upperPlane ← Plane() with:", ((string)(null)), table23, "And ");
#line 150
 testRunner.And("upperPlane is added to world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.And("ray ← Ray(Point(0, 0, 0), Vector(0, 1, 0))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 152
 testRunner.Then("world.ColorAt(ray) should terminate successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The reflected color at the maximum recursive depth")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "The reflected color at the maximum recursive depth")]
        public virtual void TheReflectedColorAtTheMaximumRecursiveDepth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The reflected color at the maximum recursive depth", null, ((string[])(null)));
#line 154
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 155
 testRunner.Given("world ← default_world()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "material.reflective",
                        "0.5"});
            table24.AddRow(new string[] {
                        "transform",
                        "translation(0, -1, 0)"});
#line 156
 testRunner.And("plane ← Plane() with:", ((string)(null)), table24, "And ");
#line 159
 testRunner.And("plane is added to world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 160
 testRunner.And("ray ← Ray(Point(0, 0, -3), Vector(0, -√2/2, √2/2))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 161
 testRunner.And("intersection ← Intersection(√2, plane)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 162
 testRunner.When("computations ← intersection.PrepareComputations(ray)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 163
 testRunner.And("color ← world.ReflectedColor(computations, 0)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
 testRunner.Then("color = Color(0, 0, 0)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The refracted color with an opaque surface")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "The refracted color with an opaque surface")]
        public virtual void TheRefractedColorWithAnOpaqueSurface()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The refracted color with an opaque surface", null, ((string[])(null)));
#line 166
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 167
 testRunner.Given("world ← default_world()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 168
 testRunner.And("sphere1 ← the first shape in world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 169
 testRunner.And("ray ← Ray(Point(0, 0, -5), Vector(0, 0, 1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 170
 testRunner.And("intersections ← Add(4, sphere1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 171
 testRunner.And("intersections ← Add(6, sphere1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
 testRunner.When("computations ← intersections[0].PrepareComputations(ray, intersections)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 173
 testRunner.And("color ← world.RefractedColor(computations, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 174
 testRunner.Then("color = Color(0, 0, 0)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The refracted color at the maximum recursive depth")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "The refracted color at the maximum recursive depth")]
        public virtual void TheRefractedColorAtTheMaximumRecursiveDepth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The refracted color at the maximum recursive depth", null, ((string[])(null)));
#line 176
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 177
 testRunner.Given("world ← default_world()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 178
 testRunner.And("sphere1 ← the first shape in world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "material.transparency",
                        "1.0"});
            table25.AddRow(new string[] {
                        "material.RefractiveIndex",
                        "1.5"});
#line 179
 testRunner.And("sphere1 has:", ((string)(null)), table25, "And ");
#line 182
 testRunner.And("ray ← Ray(Point(0, 0, -5), Vector(0, 0, 1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
 testRunner.And("intersections ← Add(4, sphere1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 184
 testRunner.And("intersections ← Add(6, sphere1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 185
 testRunner.When("computations ← intersections[0].PrepareComputations(ray, intersections)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 186
 testRunner.And("color ← world.RefractedColor(computations, 0)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 187
 testRunner.Then("color = Color(0, 0, 0)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The refracted color under total internal reflection")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "The refracted color under total internal reflection")]
        public virtual void TheRefractedColorUnderTotalInternalReflection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The refracted color under total internal reflection", null, ((string[])(null)));
#line 189
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 190
 testRunner.Given("world ← default_world()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 191
 testRunner.And("sphere1 ← the first shape in world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "material.transparency",
                        "1.0"});
            table26.AddRow(new string[] {
                        "material.RefractiveIndex",
                        "1.5"});
#line 192
 testRunner.And("sphere1 has:", ((string)(null)), table26, "And ");
#line 195
 testRunner.And("ray ← Ray(Point(0, 0, √2/2), Vector(0, 1, 0))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 196
 testRunner.And("intersections ← Add(-√2/2, sphere1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 197
 testRunner.And("intersections ← Add(√2/2, sphere1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
 testRunner.When("computations ← intersections[1].PrepareComputations(ray, intersections)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 201
 testRunner.And("color ← world.RefractedColor(computations, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 202
 testRunner.Then("color = Color(0, 0, 0)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The refracted color with a refracted ray")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "The refracted color with a refracted ray")]
        public virtual void TheRefractedColorWithARefractedRay()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The refracted color with a refracted ray", null, ((string[])(null)));
#line 204
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 205
 testRunner.Given("world ← default_world()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 206
 testRunner.And("sphere1 ← the first shape in world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "material.pattern",
                        "TestPatter()"});
            table27.AddRow(new string[] {
                        "material.Ambient",
                        "1.0"});
#line 207
 testRunner.And("sphere1 has:", ((string)(null)), table27, "And ");
#line 210
 testRunner.And("sphere2 ← the second shape in world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "material.Transparency",
                        "1.0"});
            table28.AddRow(new string[] {
                        "material.RefractiveIndex",
                        "1.5"});
#line 211
 testRunner.And("sphere2 has:", ((string)(null)), table28, "And ");
#line 214
 testRunner.And("ray ← Ray(Point(0, 0, 0.1), Vector(0, 1, 0))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
 testRunner.And("intersections ← Add(-0.9899, sphere1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
 testRunner.And("intersections ← Add(-0.4899, sphere2)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
 testRunner.And("intersections ← Add(0.4899, sphere2)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 218
 testRunner.And("intersections ← Add(0.9899, sphere1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
 testRunner.When("computations ← intersections[2].PrepareComputations(ray, intersections)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 220
 testRunner.And("color ← world.RefractedColor(computations, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 221
 testRunner.Then("color = Color(0, 0.99888, 0.04725)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="shade_hit() with a transparent material")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "shade_hit() with a transparent material")]
        public virtual void Shade_HitWithATransparentMaterial()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("shade_hit() with a transparent material", null, ((string[])(null)));
#line 223
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 224
 testRunner.Given("world ← default_world()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "transform",
                        "translation(0, -1, 0)"});
            table29.AddRow(new string[] {
                        "material.Transparency",
                        "0.5"});
            table29.AddRow(new string[] {
                        "material.RefractiveIndex",
                        "1.5"});
#line 225
 testRunner.And("floor ← Plane() with:", ((string)(null)), table29, "And ");
#line 229
 testRunner.And("floor is added to world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "material.color",
                        "(1, 0, 0)"});
            table30.AddRow(new string[] {
                        "material.Ambient",
                        "0.5"});
            table30.AddRow(new string[] {
                        "transform",
                        "translation(0, -3.5, -0.5)"});
#line 230
 testRunner.And("sphere ← Sphere() with:", ((string)(null)), table30, "And ");
#line 234
 testRunner.And("sphere is added to world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 235
 testRunner.And("ray ← Ray(Point(0, 0, -3), Vector(0, -√2/2, √2/2))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
 testRunner.And("intersections ← Add(√2, floor)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 237
 testRunner.When("computations ← intersections[0].PrepareComputations(ray, intersections)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 238
 testRunner.And("color ← world.ShadeHit(computations, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 239
 testRunner.Then("color = Color(0.93642, 0.68642, 0.68642)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="shade_hit() with a reflective, transparent material")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "shade_hit() with a reflective, transparent material")]
        public virtual void Shade_HitWithAReflectiveTransparentMaterial()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("shade_hit() with a reflective, transparent material", null, ((string[])(null)));
#line 241
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 242
 testRunner.Given("world ← default_world()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 243
 testRunner.And("ray ← Ray(Point(0, 0, -3), Vector(0, -√2/2, √2/2))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "transform",
                        "translation(0, -1, 0)"});
            table31.AddRow(new string[] {
                        "material.reflective",
                        "0.5"});
            table31.AddRow(new string[] {
                        "material.Transparency",
                        "0.5"});
            table31.AddRow(new string[] {
                        "material.RefractiveIndex",
                        "1.5"});
#line 244
 testRunner.And("floor ← Plane() with:", ((string)(null)), table31, "And ");
#line 249
 testRunner.And("floor is added to world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "material.color",
                        "(1, 0, 0)"});
            table32.AddRow(new string[] {
                        "material.Ambient",
                        "0.5"});
            table32.AddRow(new string[] {
                        "transform",
                        "translation(0, -3.5, -0.5)"});
#line 250
 testRunner.And("sphere ← Sphere() with:", ((string)(null)), table32, "And ");
#line 254
 testRunner.And("sphere is added to world", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 255
 testRunner.And("intersections ← Add(√2, floor)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 256
 testRunner.When("computations ← intersections[0].PrepareComputations(ray, intersections)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 257
 testRunner.And("color ← world.ShadeHit(computations, 5)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 258
 testRunner.Then("color = Color(0.93391, 0.69643, 0.69243)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="is_shadow tests for occlusion between two points")]
        [Xunit.TraitAttribute("FeatureTitle", "world")]
        [Xunit.TraitAttribute("Description", "is_shadow tests for occlusion between two points")]
        [Xunit.InlineDataAttribute("Point(-10, -10, 10)", "false", new string[0])]
        [Xunit.InlineDataAttribute("Point(10, 10, 10)", "true", new string[0])]
        [Xunit.InlineDataAttribute("Point(-20, -20, -20)", "false", new string[0])]
        [Xunit.InlineDataAttribute("Point(-5, -5, -5)", "false", new string[0])]
        public virtual void Is_ShadowTestsForOcclusionBetweenTwoPoints(string point, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("is_shadow tests for occlusion between two points", null, exampleTags);
#line 260
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 261
 testRunner.Given("world ← default_world()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 262
 testRunner.And("light_position ← Point(-10, -10, -10)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 263
 testRunner.And(string.Format("point ← {0}", point), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 264
 testRunner.Then(string.Format("is_shadowed(w, light_position, point) is {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                WorldFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                WorldFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
