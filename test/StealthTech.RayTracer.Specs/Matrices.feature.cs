// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace StealthTech.RayTracer.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MatricesFeature : Xunit.IClassFixture<MatricesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Matrices.feature"
#line hidden
        
        public MatricesFeature(MatricesFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Matrices", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Matrix equality with identical matrices")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Matrix equality with identical matrices")]
        public virtual void MatrixEqualityWithIdenticalMatrices()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Matrix equality with identical matrices", null, ((string[])(null)));
#line 3
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "1",
                        "2",
                        "3",
                        "4"});
            table6.AddRow(new string[] {
                        "5",
                        "6",
                        "7",
                        "8"});
            table6.AddRow(new string[] {
                        "9",
                        "8",
                        "7",
                        "6"});
            table6.AddRow(new string[] {
                        "5",
                        "4",
                        "3",
                        "2"});
#line 4
 testRunner.Given("the following matrix A:", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "1",
                        "2",
                        "3",
                        "4"});
            table7.AddRow(new string[] {
                        "5",
                        "6",
                        "7",
                        "8"});
            table7.AddRow(new string[] {
                        "9",
                        "8",
                        "7",
                        "6"});
            table7.AddRow(new string[] {
                        "5",
                        "4",
                        "3",
                        "2"});
#line 9
 testRunner.And("the following matrix B:", ((string)(null)), table7, "And ");
#line 14
 testRunner.Then("A = B", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Matrix equality with different matrices")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Matrix equality with different matrices")]
        public virtual void MatrixEqualityWithDifferentMatrices()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Matrix equality with different matrices", null, ((string[])(null)));
#line 16
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "1",
                        "2",
                        "3",
                        "4"});
            table8.AddRow(new string[] {
                        "5",
                        "6",
                        "7",
                        "8"});
            table8.AddRow(new string[] {
                        "9",
                        "8",
                        "7",
                        "6"});
            table8.AddRow(new string[] {
                        "5",
                        "4",
                        "3",
                        "2"});
#line 17
 testRunner.Given("the following matrix A:", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "1",
                        "2",
                        "3",
                        "4"});
            table9.AddRow(new string[] {
                        "5",
                        "6",
                        "7",
                        "8"});
            table9.AddRow(new string[] {
                        "9",
                        "8",
                        "7",
                        "6"});
            table9.AddRow(new string[] {
                        "5",
                        "4",
                        "4",
                        "2"});
#line 22
 testRunner.And("the following matrix B:", ((string)(null)), table9, "And ");
#line 27
 testRunner.Then("A != B", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Multiplying two matrices")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Multiplying two matrices")]
        public virtual void MultiplyingTwoMatrices()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying two matrices", null, ((string[])(null)));
#line 29
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "1",
                        "2",
                        "3",
                        "4"});
            table10.AddRow(new string[] {
                        "5",
                        "6",
                        "7",
                        "8"});
            table10.AddRow(new string[] {
                        "9",
                        "8",
                        "7",
                        "6"});
            table10.AddRow(new string[] {
                        "5",
                        "4",
                        "3",
                        "2"});
#line 30
 testRunner.Given("the following matrix A:", ((string)(null)), table10, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "-2",
                        "1",
                        "2",
                        "3"});
            table11.AddRow(new string[] {
                        "3",
                        "2",
                        "1",
                        "-1"});
            table11.AddRow(new string[] {
                        "4",
                        "3",
                        "6",
                        "5"});
            table11.AddRow(new string[] {
                        "1",
                        "2",
                        "7",
                        "8"});
#line 35
 testRunner.And("the following matrix B:", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "20",
                        "22",
                        "50",
                        "48"});
            table12.AddRow(new string[] {
                        "44",
                        "54",
                        "114",
                        "108"});
            table12.AddRow(new string[] {
                        "40",
                        "58",
                        "110",
                        "102"});
            table12.AddRow(new string[] {
                        "16",
                        "26",
                        "46",
                        "42"});
#line 40
 testRunner.Then("A * B is the following matrix:", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Multiplying a matrix by the identity matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Multiplying a matrix by the identity matrix")]
        public virtual void MultiplyingAMatrixByTheIdentityMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying a matrix by the identity matrix", null, ((string[])(null)));
#line 120
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "0",
                        "1",
                        "2",
                        "4"});
            table13.AddRow(new string[] {
                        "1",
                        "2",
                        "4",
                        "8"});
            table13.AddRow(new string[] {
                        "2",
                        "4",
                        "8",
                        "16"});
            table13.AddRow(new string[] {
                        "4",
                        "8",
                        "16",
                        "32"});
#line 121
 testRunner.Given("the following matrix A:", ((string)(null)), table13, "Given ");
#line 126
 testRunner.Then("A * identity_matrix = A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Transposing a matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Transposing a matrix")]
        public virtual void TransposingAMatrix()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transposing a matrix", null, ((string[])(null)));
#line 145
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "0",
                        "9",
                        "3",
                        "0"});
            table14.AddRow(new string[] {
                        "9",
                        "8",
                        "0",
                        "8"});
            table14.AddRow(new string[] {
                        "1",
                        "8",
                        "5",
                        "3"});
            table14.AddRow(new string[] {
                        "0",
                        "0",
                        "5",
                        "8"});
#line 146
 testRunner.Given("the following matrix A:", ((string)(null)), table14, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "0",
                        "9",
                        "1",
                        "0"});
            table15.AddRow(new string[] {
                        "9",
                        "8",
                        "8",
                        "0"});
            table15.AddRow(new string[] {
                        "3",
                        "0",
                        "5",
                        "5"});
            table15.AddRow(new string[] {
                        "0",
                        "8",
                        "3",
                        "8"});
#line 151
 testRunner.Then("transpose(A) is the following matrix:", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MatricesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MatricesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
