// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace StealthTech.RayTracer.Specs
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MatricesFeature : Xunit.IClassFixture<MatricesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Matrices.feature"
#line hidden
        
        public MatricesFeature(MatricesFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            InternalSpecFlow.XUnitAssemblyFixture assemblyFixture = new InternalSpecFlow.XUnitAssemblyFixture();
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Matrices", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Matrix equality with identical matrices")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Matrix equality with identical matrices")]
        public virtual void MatrixEqualityWithIdenticalMatrices()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Matrix equality with identical matrices", null, ((string[])(null)));
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "1",
                            "2",
                            "3",
                            "4"});
                table6.AddRow(new string[] {
                            "5",
                            "6",
                            "7",
                            "8"});
                table6.AddRow(new string[] {
                            "9",
                            "8",
                            "7",
                            "6"});
                table6.AddRow(new string[] {
                            "5",
                            "4",
                            "3",
                            "2"});
#line 4
 testRunner.Given("the following matrix A:", ((string)(null)), table6, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "1",
                            "2",
                            "3",
                            "4"});
                table7.AddRow(new string[] {
                            "5",
                            "6",
                            "7",
                            "8"});
                table7.AddRow(new string[] {
                            "9",
                            "8",
                            "7",
                            "6"});
                table7.AddRow(new string[] {
                            "5",
                            "4",
                            "3",
                            "2"});
#line 9
 testRunner.And("the following matrix B:", ((string)(null)), table7, "And ");
#line hidden
#line 14
 testRunner.Then("A = B", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Matrix equality with different matrices")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Matrix equality with different matrices")]
        public virtual void MatrixEqualityWithDifferentMatrices()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Matrix equality with different matrices", null, ((string[])(null)));
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "1",
                            "2",
                            "3",
                            "4"});
                table8.AddRow(new string[] {
                            "5",
                            "6",
                            "7",
                            "8"});
                table8.AddRow(new string[] {
                            "9",
                            "8",
                            "7",
                            "6"});
                table8.AddRow(new string[] {
                            "5",
                            "4",
                            "3",
                            "2"});
#line 17
 testRunner.Given("the following matrix A:", ((string)(null)), table8, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "1",
                            "2",
                            "3",
                            "4"});
                table9.AddRow(new string[] {
                            "5",
                            "6",
                            "7",
                            "8"});
                table9.AddRow(new string[] {
                            "9",
                            "8",
                            "7",
                            "6"});
                table9.AddRow(new string[] {
                            "5",
                            "4",
                            "4",
                            "2"});
#line 22
 testRunner.And("the following matrix B:", ((string)(null)), table9, "And ");
#line hidden
#line 27
 testRunner.Then("A != B", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Multiplying two matrices")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Multiplying two matrices")]
        public virtual void MultiplyingTwoMatrices()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying two matrices", null, ((string[])(null)));
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "1",
                            "2",
                            "3",
                            "4"});
                table10.AddRow(new string[] {
                            "5",
                            "6",
                            "7",
                            "8"});
                table10.AddRow(new string[] {
                            "9",
                            "8",
                            "7",
                            "6"});
                table10.AddRow(new string[] {
                            "5",
                            "4",
                            "3",
                            "2"});
#line 30
 testRunner.Given("the following matrix A:", ((string)(null)), table10, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "-2",
                            "1",
                            "2",
                            "3"});
                table11.AddRow(new string[] {
                            "3",
                            "2",
                            "1",
                            "-1"});
                table11.AddRow(new string[] {
                            "4",
                            "3",
                            "6",
                            "5"});
                table11.AddRow(new string[] {
                            "1",
                            "2",
                            "7",
                            "8"});
#line 35
 testRunner.And("the following matrix B:", ((string)(null)), table11, "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "20",
                            "22",
                            "50",
                            "48"});
                table12.AddRow(new string[] {
                            "44",
                            "54",
                            "114",
                            "108"});
                table12.AddRow(new string[] {
                            "40",
                            "58",
                            "110",
                            "102"});
                table12.AddRow(new string[] {
                            "16",
                            "26",
                            "46",
                            "42"});
#line 40
 testRunner.Then("A * B is the following matrix:", ((string)(null)), table12, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A matrix multiplied by a point")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "A matrix multiplied by a point")]
        public virtual void AMatrixMultipliedByAPoint()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A matrix multiplied by a point", null, ((string[])(null)));
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "1",
                            "2",
                            "3",
                            "4"});
                table13.AddRow(new string[] {
                            "2",
                            "4",
                            "4",
                            "2"});
                table13.AddRow(new string[] {
                            "8",
                            "6",
                            "4",
                            "1"});
                table13.AddRow(new string[] {
                            "0",
                            "0",
                            "0",
                            "1"});
#line 47
 testRunner.Given("the following matrix A:", ((string)(null)), table13, "Given ");
#line hidden
#line 52
 testRunner.And("point ← Point(1, 2, 3)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.Then("A * b = Point(18, 24, 33)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Multiplying a matrix by the identity matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Multiplying a matrix by the identity matrix")]
        public virtual void MultiplyingAMatrixByTheIdentityMatrix()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying a matrix by the identity matrix", null, ((string[])(null)));
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "0",
                            "1",
                            "2",
                            "4"});
                table14.AddRow(new string[] {
                            "1",
                            "2",
                            "4",
                            "8"});
                table14.AddRow(new string[] {
                            "2",
                            "4",
                            "8",
                            "16"});
                table14.AddRow(new string[] {
                            "4",
                            "8",
                            "16",
                            "32"});
#line 56
 testRunner.Given("the following matrix A:", ((string)(null)), table14, "Given ");
#line hidden
#line 61
 testRunner.Then("A * identity_matrix = A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Multiplying the identity matrix by a point")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Multiplying the identity matrix by a point")]
        public virtual void MultiplyingTheIdentityMatrixByAPoint()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying the identity matrix by a point", null, ((string[])(null)));
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 64
 testRunner.Given("point ← Point(1, 2, 3)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "1",
                            "0",
                            "0",
                            "0"});
                table15.AddRow(new string[] {
                            "0",
                            "1",
                            "0",
                            "0"});
                table15.AddRow(new string[] {
                            "0",
                            "0",
                            "1",
                            "0"});
                table15.AddRow(new string[] {
                            "0",
                            "0",
                            "0",
                            "1"});
#line 65
 testRunner.And("the following matrix A:", ((string)(null)), table15, "And ");
#line hidden
#line 70
 testRunner.Then("identity_matrix * point = point", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Transposing a matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Transposing a matrix")]
        public virtual void TransposingAMatrix()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transposing a matrix", null, ((string[])(null)));
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "0",
                            "9",
                            "3",
                            "0"});
                table16.AddRow(new string[] {
                            "9",
                            "8",
                            "0",
                            "8"});
                table16.AddRow(new string[] {
                            "1",
                            "8",
                            "5",
                            "3"});
                table16.AddRow(new string[] {
                            "0",
                            "0",
                            "5",
                            "8"});
#line 73
 testRunner.Given("the following matrix A:", ((string)(null)), table16, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "0",
                            "9",
                            "1",
                            "0"});
                table17.AddRow(new string[] {
                            "9",
                            "8",
                            "8",
                            "0"});
                table17.AddRow(new string[] {
                            "3",
                            "0",
                            "5",
                            "5"});
                table17.AddRow(new string[] {
                            "0",
                            "8",
                            "3",
                            "8"});
#line 78
 testRunner.Then("transpose(A) is the following matrix:", ((string)(null)), table17, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Transposing the identity matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Transposing the identity matrix")]
        public virtual void TransposingTheIdentityMatrix()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transposing the identity matrix", null, ((string[])(null)));
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "1",
                            "0",
                            "0",
                            "0"});
                table18.AddRow(new string[] {
                            "0",
                            "1",
                            "0",
                            "0"});
                table18.AddRow(new string[] {
                            "0",
                            "0",
                            "1",
                            "0"});
                table18.AddRow(new string[] {
                            "0",
                            "0",
                            "0",
                            "1"});
#line 85
 testRunner.Given("the following matrix A:", ((string)(null)), table18, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "1",
                            "0",
                            "0",
                            "0"});
                table19.AddRow(new string[] {
                            "0",
                            "1",
                            "0",
                            "0"});
                table19.AddRow(new string[] {
                            "0",
                            "0",
                            "1",
                            "0"});
                table19.AddRow(new string[] {
                            "0",
                            "0",
                            "0",
                            "1"});
#line 90
 testRunner.Then("transpose(A) is the following matrix:", ((string)(null)), table19, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Testing an invertible matrix for invertibility")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Testing an invertible matrix for invertibility")]
        public virtual void TestingAnInvertibleMatrixForInvertibility()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing an invertible matrix for invertibility", null, ((string[])(null)));
#line 96
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "6",
                            "4",
                            "4",
                            "4"});
                table20.AddRow(new string[] {
                            "5",
                            "5",
                            "7",
                            "6"});
                table20.AddRow(new string[] {
                            "4",
                            "-9",
                            "3",
                            "-7"});
                table20.AddRow(new string[] {
                            "9",
                            "1",
                            "7",
                            "-6"});
#line 97
 testRunner.Given("the following matrix A:", ((string)(null)), table20, "Given ");
#line hidden
#line 102
 testRunner.Then("determinant(A) = -2120", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 103
 testRunner.And("A is invertible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Testing a noninvertible matrix for invertibility")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Testing a noninvertible matrix for invertibility")]
        public virtual void TestingANoninvertibleMatrixForInvertibility()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing a noninvertible matrix for invertibility", null, ((string[])(null)));
#line 105
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "-4",
                            "2",
                            "-2",
                            "-3"});
                table21.AddRow(new string[] {
                            "9",
                            "6",
                            "2",
                            "6"});
                table21.AddRow(new string[] {
                            "0",
                            "-5",
                            "1",
                            "-5"});
                table21.AddRow(new string[] {
                            "0",
                            "0",
                            "0",
                            "0"});
#line 106
 testRunner.Given("the following matrix A:", ((string)(null)), table21, "Given ");
#line hidden
#line 111
 testRunner.Then("determinant(A) = 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 112
 testRunner.And("A is not invertible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculating the inverse of another matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Calculating the inverse of another matrix")]
        public virtual void CalculatingTheInverseOfAnotherMatrix()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculating the inverse of another matrix", null, ((string[])(null)));
#line 114
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "8",
                            "-5",
                            "9",
                            "2"});
                table22.AddRow(new string[] {
                            "7",
                            "5",
                            "6",
                            "1"});
                table22.AddRow(new string[] {
                            "-6",
                            "0",
                            "9",
                            "6"});
                table22.AddRow(new string[] {
                            "-3",
                            "0",
                            "-9",
                            "-4"});
#line 115
 testRunner.Given("the following matrix A:", ((string)(null)), table22, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "-0.15385",
                            "-0.15385",
                            "-0.28205",
                            "-0.53846"});
                table23.AddRow(new string[] {
                            "-0.07692",
                            "0.12308",
                            "0.02564",
                            "0.03077"});
                table23.AddRow(new string[] {
                            "0.35897",
                            "0.35897",
                            "0.43590",
                            "0.92308"});
                table23.AddRow(new string[] {
                            "-0.69231",
                            "-0.69231",
                            "-0.76923",
                            "-1.92308"});
#line 120
 testRunner.Then("inverse(A) is approximately equal to matrix:", ((string)(null)), table23, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculating the inverse of a third matrix")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Calculating the inverse of a third matrix")]
        public virtual void CalculatingTheInverseOfAThirdMatrix()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculating the inverse of a third matrix", null, ((string[])(null)));
#line 126
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "9",
                            "3",
                            "0",
                            "9"});
                table24.AddRow(new string[] {
                            "-5",
                            "-2",
                            "-6",
                            "-3"});
                table24.AddRow(new string[] {
                            "-4",
                            "9",
                            "6",
                            "4"});
                table24.AddRow(new string[] {
                            "-7",
                            "6",
                            "6",
                            "2"});
#line 127
 testRunner.Given("the following matrix A:", ((string)(null)), table24, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "-0.04074",
                            "-0.07778",
                            "0.14444",
                            "-0.22222"});
                table25.AddRow(new string[] {
                            "-0.07778",
                            "0.03333",
                            "0.36667",
                            "-0.33333"});
                table25.AddRow(new string[] {
                            "-0.02901",
                            "-0.14630",
                            "-0.10926",
                            "0.12963"});
                table25.AddRow(new string[] {
                            "0.17778",
                            "0.06667",
                            "-0.26667",
                            "0.33333"});
#line 132
 testRunner.Then("inverse(A) is approximately equal to matrix:", ((string)(null)), table25, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Multiplying a product by its inverse")]
        [Xunit.TraitAttribute("FeatureTitle", "Matrices")]
        [Xunit.TraitAttribute("Description", "Multiplying a product by its inverse")]
        public virtual void MultiplyingAProductByItsInverse()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying a product by its inverse", null, ((string[])(null)));
#line 138
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "3",
                            "-9",
                            "7",
                            "3"});
                table26.AddRow(new string[] {
                            "3",
                            "-8",
                            "2",
                            "-9"});
                table26.AddRow(new string[] {
                            "-4",
                            "4",
                            "4",
                            "1"});
                table26.AddRow(new string[] {
                            "-6",
                            "5",
                            "-1",
                            "1"});
#line 139
 testRunner.Given("the following matrix A:", ((string)(null)), table26, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "8",
                            "2",
                            "2",
                            "2"});
                table27.AddRow(new string[] {
                            "3",
                            "-1",
                            "7",
                            "0"});
                table27.AddRow(new string[] {
                            "7",
                            "0",
                            "5",
                            "4"});
                table27.AddRow(new string[] {
                            "6",
                            "-2",
                            "0",
                            "5"});
#line 144
 testRunner.And("the following matrix B:", ((string)(null)), table27, "And ");
#line hidden
#line 149
 testRunner.And("C ← A * B", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 150
 testRunner.Then("C * inverse(B) approximately equal to A", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MatricesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MatricesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
