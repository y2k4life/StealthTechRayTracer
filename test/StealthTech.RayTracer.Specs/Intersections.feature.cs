// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace StealthTech.RayTracer.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class IntersectionsFeature : Xunit.IClassFixture<IntersectionsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Intersections.feature"
#line hidden
        
        public IntersectionsFeature(IntersectionsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Intersections", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="An intersection encapsulates t and object")]
        [Xunit.TraitAttribute("FeatureTitle", "Intersections")]
        [Xunit.TraitAttribute("Description", "An intersection encapsulates t and object")]
        public virtual void AnIntersectionEncapsulatesTAndObject()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An intersection encapsulates t and object", null, ((string[])(null)));
#line 3
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
 testRunner.Given("sphere ← Sphere()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.When("intersection ← Intersection(3.5, s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 6
 testRunner.Then("intersection.Time = 3.5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 7
 testRunner.And("intersection.Shape = s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Aggregating intersections")]
        [Xunit.TraitAttribute("FeatureTitle", "Intersections")]
        [Xunit.TraitAttribute("Description", "Aggregating intersections")]
        public virtual void AggregatingIntersections()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Aggregating intersections", null, ((string[])(null)));
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 10
 testRunner.Given("sphere ← Sphere()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.And("intersection1 ← Intersection(1, sphere)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("intersection2 ← Intersection(2, sphere)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.When("intersections ← IntersectionList(i1, i2)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.Then("intersections.Count = 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 15
 testRunner.And("intersections[0].Time = 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("intersections[1].Time = 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The hit, when all intersections have positive t")]
        [Xunit.TraitAttribute("FeatureTitle", "Intersections")]
        [Xunit.TraitAttribute("Description", "The hit, when all intersections have positive t")]
        public virtual void TheHitWhenAllIntersectionsHavePositiveT()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The hit, when all intersections have positive t", null, ((string[])(null)));
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 19
 testRunner.Given("sphere ← Sphere()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.And("intersection1 ← Intersection(1, sphere)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.And("intersection2 ← Intersection(2, sphere)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.And("intersections ← IntersectionList(i1, i2)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.When("intersection ← hit(intersections)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then("intersection = intersection1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The hit, when some intersections have negative t")]
        [Xunit.TraitAttribute("FeatureTitle", "Intersections")]
        [Xunit.TraitAttribute("Description", "The hit, when some intersections have negative t")]
        public virtual void TheHitWhenSomeIntersectionsHaveNegativeT()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The hit, when some intersections have negative t", null, ((string[])(null)));
#line 26
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 27
 testRunner.Given("sphere ← Sphere()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.And("intersection1 ← Intersection(-1, sphere)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.And("intersection2 ← Intersection(1, sphere)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.And("intersections ← IntersectionList(i1, i2)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.When("intersection ← hit(intersections)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
 testRunner.Then("intersection = intersection2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The hit, when all intersections have negative t")]
        [Xunit.TraitAttribute("FeatureTitle", "Intersections")]
        [Xunit.TraitAttribute("Description", "The hit, when all intersections have negative t")]
        public virtual void TheHitWhenAllIntersectionsHaveNegativeT()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The hit, when all intersections have negative t", null, ((string[])(null)));
#line 34
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 35
 testRunner.Given("sphere ← Sphere()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
 testRunner.And("intersection1 ← Intersection(-2, sphere)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.And("intersection2 ← Intersection(-1, sphere)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("intersections ← IntersectionList(i1, i2)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.When("intersection ← hit(intersections)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("intersection is nothing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The hit is always the lowest nonnegative intersection")]
        [Xunit.TraitAttribute("FeatureTitle", "Intersections")]
        [Xunit.TraitAttribute("Description", "The hit is always the lowest nonnegative intersection")]
        public virtual void TheHitIsAlwaysTheLowestNonnegativeIntersection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The hit is always the lowest nonnegative intersection", null, ((string[])(null)));
#line 42
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 43
 testRunner.Given("sphere ← Sphere()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
 testRunner.And("intersection1 ← Intersection(5, sphere)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
 testRunner.And("intersection2 ← Intersection(7, sphere)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.And("intersection3 ← Intersection(-3, sphere)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.And("intersection4 ← Intersection(2, s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.And("intersections ← IntersectionList(i1, i2, i3, i4)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
 testRunner.When("intersection ← hit(intersections)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
 testRunner.Then("intersection = i4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Precomputing the state of an intersection")]
        [Xunit.TraitAttribute("FeatureTitle", "Intersections")]
        [Xunit.TraitAttribute("Description", "Precomputing the state of an intersection")]
        public virtual void PrecomputingTheStateOfAnIntersection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Precomputing the state of an intersection", null, ((string[])(null)));
#line 52
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 53
 testRunner.Given("ray ← Ray(Point(0, 0, -5), Vector(0, 0, 1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 54
 testRunner.And("sphere ← Sphere()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
 testRunner.And("intersection ← Intersection(4, sphere)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
 testRunner.When("computations ← intersection.PrepareComputations(ray)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
 testRunner.Then("computations.Time = intersection.Time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 58
 testRunner.And("computations.Shape = intersection.Shape", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
 testRunner.And("computations.Position = Point(0, 0, -1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.And("computations.EyeVector = Vector(0, 0, -1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
 testRunner.And("computations.NormalVector = Vector(0, 0, -1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The hit, when an intersection occurs on the outside")]
        [Xunit.TraitAttribute("FeatureTitle", "Intersections")]
        [Xunit.TraitAttribute("Description", "The hit, when an intersection occurs on the outside")]
        public virtual void TheHitWhenAnIntersectionOccursOnTheOutside()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The hit, when an intersection occurs on the outside", null, ((string[])(null)));
#line 63
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 64
 testRunner.Given("ray ← Ray(Point(0, 0, -5), Vector(0, 0, 1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
 testRunner.And("sphere ← Sphere()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.And("intersection ← Intersection(4, sphere)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.When("computations ← intersection.PrepareComputations(ray)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
 testRunner.Then("computations.Inside = false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The hit, when an intersection occurs on the inside")]
        [Xunit.TraitAttribute("FeatureTitle", "Intersections")]
        [Xunit.TraitAttribute("Description", "The hit, when an intersection occurs on the inside")]
        public virtual void TheHitWhenAnIntersectionOccursOnTheInside()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The hit, when an intersection occurs on the inside", null, ((string[])(null)));
#line 70
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 71
 testRunner.Given("ray ← Ray(Point(0, 0, 0), Vector(0, 0, 1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 72
 testRunner.And("sphere ← Sphere()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
 testRunner.And("intersection ← Intersection(1, sphere)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.When("computations ← intersection.PrepareComputations(ray)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.Then("computations.Position = Point(0, 0, 1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 76
 testRunner.And("computations.EyeVector = Vector(0, 0, -1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.And("computations.Inside = true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
 testRunner.And("computations.NormalVector = Vector(0, 0, -1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The hit should offset the point")]
        [Xunit.TraitAttribute("FeatureTitle", "Intersections")]
        [Xunit.TraitAttribute("Description", "The hit should offset the point")]
        public virtual void TheHitShouldOffsetThePoint()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The hit should offset the point", null, ((string[])(null)));
#line 81
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 82
 testRunner.Given("ray ← Ray(Point(0, 0, -5), Vector(0, 0, 1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "transform",
                        "translation(0, 0, 1)"});
#line 83
 testRunner.And("sphere ← Sphere() with:", ((string)(null)), table1, "And ");
#line 85
 testRunner.And("intersection ← Intersection(5, sphere)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.When("computations ← intersection.PrepareComputations(ray)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 87
 testRunner.Then("computations.OverPoint.Z < -EPSILON/2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 88
 testRunner.And("computations.Point.Z > computations.OverPoint.Z", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Precomputing the reflection vector")]
        [Xunit.TraitAttribute("FeatureTitle", "Intersections")]
        [Xunit.TraitAttribute("Description", "Precomputing the reflection vector")]
        public virtual void PrecomputingTheReflectionVector()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Precomputing the reflection vector", null, ((string[])(null)));
#line 90
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 91
 testRunner.Given("plane ← Plane()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 92
 testRunner.And("ray ← Ray(Point(0, 1, -1), Vector(0, -√2/2, √2/2))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.And("intersection ← Intersection(√2, plane)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.When("computations ← intersection.PrepareComputations(ray)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
 testRunner.Then("computations.ReflectVector = Vector(0, √2/2, √2/2)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Finding n1 and n2 at various intersections")]
        [Xunit.TraitAttribute("FeatureTitle", "Intersections")]
        [Xunit.TraitAttribute("Description", "Finding n1 and n2 at various intersections")]
        [Xunit.InlineDataAttribute("0", "1.0", "1.5", new string[0])]
        [Xunit.InlineDataAttribute("1", "1.5", "2.0", new string[0])]
        [Xunit.InlineDataAttribute("2", "2.0", "2.5", new string[0])]
        [Xunit.InlineDataAttribute("3", "2.5", "2.5", new string[0])]
        [Xunit.InlineDataAttribute("4", "2.5", "1.5", new string[0])]
        [Xunit.InlineDataAttribute("5", "1.5", "1.0", new string[0])]
        public virtual void FindingN1AndN2AtVariousIntersections(string index, string n1, string n2, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Finding n1 and n2 at various intersections", null, exampleTags);
#line 97
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "transform",
                        "scaling(2, 2, 2)"});
            table2.AddRow(new string[] {
                        "material.RefractiveIndex",
                        "1.5"});
#line 98
 testRunner.Given("sphere1 ← GlassSphere() with:", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "transform",
                        "translation(0, 0, -0.25)"});
            table3.AddRow(new string[] {
                        "material.RefractiveIndex",
                        "2.0"});
#line 101
 testRunner.And("sphere2 ← GlassSphere() with:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "transform",
                        "translation(0, 0, 0.25)"});
            table4.AddRow(new string[] {
                        "material.RefractiveIndex",
                        "2.5"});
#line 104
 testRunner.And("sphere3 ← GlassSphere() with:", ((string)(null)), table4, "And ");
#line 107
 testRunner.And("ray ← Ray(Point(0, 0, -4), Vector(0, 0, 1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
 testRunner.And("intersections ← Add(2, sphere1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
 testRunner.And("intersections ← Add(2.75, sphere2)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
 testRunner.And("intersections ← Add(3.25, sphere3)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
 testRunner.And("intersections ← Add(4.75, sphere2)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
 testRunner.And("intersections ← Add(5.25, sphere3)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.And("intersections ← Add(6, sphere1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
 testRunner.When(string.Format("computations ← intersections[{0}].PrepareComputations(ray, intersections)", index), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 115
 testRunner.Then(string.Format("computations.n1 = {0}", n1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 116
 testRunner.And(string.Format("computations.n2 = {0}", n2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The under point is offset below the surface")]
        [Xunit.TraitAttribute("FeatureTitle", "Intersections")]
        [Xunit.TraitAttribute("Description", "The under point is offset below the surface")]
        public virtual void TheUnderPointIsOffsetBelowTheSurface()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The under point is offset below the surface", null, ((string[])(null)));
#line 127
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 128
 testRunner.Given("ray ← Ray(Point(0, 0, -5), Vector(0, 0, 1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "transform",
                        "translation(0, 0, 1)"});
#line 129
 testRunner.And("sphere ← GlassSphere() with:", ((string)(null)), table5, "And ");
#line 131
 testRunner.And("intersection ← Intersection(5, sphere)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
 testRunner.And("intersections ← Add(intersection)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 133
 testRunner.When("computations ← intersections.PrepareComputations(ray, intersections)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 134
 testRunner.Then("computations.UnderPoint.Z > EPSILON/2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 135
 testRunner.And("computations.Position.Z < computations.UnderPoint.Z", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The Schlick approximation under total internal reflection")]
        [Xunit.TraitAttribute("FeatureTitle", "Intersections")]
        [Xunit.TraitAttribute("Description", "The Schlick approximation under total internal reflection")]
        public virtual void TheSchlickApproximationUnderTotalInternalReflection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Schlick approximation under total internal reflection", null, ((string[])(null)));
#line 137
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 138
 testRunner.Given("sphere1 ← GlassSphere()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 139
 testRunner.And("ray ← Ray(Point(0, 0, √2/2), Vector(0, 1, 0))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
 testRunner.And("intersections ← Add(-√2/2, sphere1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
 testRunner.And("intersections ← Add(√2/2, sphere1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
 testRunner.When("computations ← intersections[1].PrepareComputations(ray, intersections)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 143
 testRunner.And("reflectance ← computations.Schlick()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
 testRunner.Then("reflectance = 1.0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The Schlick approximation with a perpendicular viewing angle")]
        [Xunit.TraitAttribute("FeatureTitle", "Intersections")]
        [Xunit.TraitAttribute("Description", "The Schlick approximation with a perpendicular viewing angle")]
        public virtual void TheSchlickApproximationWithAPerpendicularViewingAngle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Schlick approximation with a perpendicular viewing angle", null, ((string[])(null)));
#line 146
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 147
 testRunner.Given("sphere1 ← GlassSphere()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 148
 testRunner.And("ray ← Ray(Point(0, 0, 0), Vector(0, 1, 0))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
 testRunner.And("intersections ← Add(-1, sphere1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.And("intersections ← Add(1, sphere1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.When("computations ← intersections[1].PrepareComputations(ray, intersections)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 152
 testRunner.And("reflectance ← computations.Schlick()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
 testRunner.Then("reflectance = 0.04", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The Schlick approximation with small angle and n2 > n1")]
        [Xunit.TraitAttribute("FeatureTitle", "Intersections")]
        [Xunit.TraitAttribute("Description", "The Schlick approximation with small angle and n2 > n1")]
        public virtual void TheSchlickApproximationWithSmallAngleAndN2N1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Schlick approximation with small angle and n2 > n1", null, ((string[])(null)));
#line 155
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 156
 testRunner.Given("sphere1 ← GlassSphere()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 157
 testRunner.And("ray ← Ray(Point(0, 0.99, -2), Vector(0, 0, 1))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
 testRunner.And("intersections ← Add(1.8589, sphere1)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 159
 testRunner.When("computations ← intersections[0].PrepareComputations(ray, intersections)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 160
 testRunner.And("reflectance ← computations.Schlick()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 161
 testRunner.Then("reflectance = 0.48873", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                IntersectionsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                IntersectionsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
