// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace StealthTech.RayTracer.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CylindersFeature : Xunit.IClassFixture<CylindersFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Cylinders.feature"
#line hidden
        
        public CylindersFeature(CylindersFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Cylinders", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute(DisplayName="A ray misses a cylinder")]
        [Xunit.TraitAttribute("FeatureTitle", "Cylinders")]
        [Xunit.TraitAttribute("Description", "A ray misses a cylinder")]
        [Xunit.InlineDataAttribute("Point(1, 0, 0)", "Vector(0, 1, 0)", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, 0, 0)", "Vector(0, 1, 0)", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, 0, -5)", "Vector(1, 1, 1)", new string[0])]
        public virtual void ARayMissesACylinder(string origin, string direction, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ray misses a cylinder", null, exampleTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
 testRunner.Given("cylinder ← cylinder()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.And(string.Format("direction ← {0}.Normalize()", direction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 6
 testRunner.And(string.Format("ray ← Ray({0}, direction)", origin), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
 testRunner.When("intersections ← cylinder.LocalIntersect(ray)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then("intersections.Count = 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="A ray strikes a cylinder")]
        [Xunit.TraitAttribute("FeatureTitle", "Cylinders")]
        [Xunit.TraitAttribute("Description", "A ray strikes a cylinder")]
        [Xunit.InlineDataAttribute("Point(1, 0, -5)", "Vector(0, 0, 1)", "5", "5", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, 0, -5)", "Vector(0, 0, 1)", "4", "6", new string[0])]
        [Xunit.InlineDataAttribute("Point(0.5, 0, -5)", "Vector(0.1, 1, 1)", "6.80798", "7.08872", new string[0])]
        public virtual void ARayStrikesACylinder(string origin, string direction, string t0, string t1, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A ray strikes a cylinder", null, exampleTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 17
 testRunner.Given("cylinder ← cylinder()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.And(string.Format("direction ← {0}.Normalize()", direction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.And(string.Format("ray ← Ray({0}, direction)", origin), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.When("intersections ← cylinder.LocalIntersect(ray)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then("intersections.Count = 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 22
 testRunner.And(string.Format("intersections[0].Time = {0}", t0), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And(string.Format("intersections[1].Time = {0}", t1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Normal vector on a cylinder")]
        [Xunit.TraitAttribute("FeatureTitle", "Cylinders")]
        [Xunit.TraitAttribute("Description", "Normal vector on a cylinder")]
        [Xunit.InlineDataAttribute("Point(1, 0, 0)", "Vector(1, 0, 0)", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, 5, -1)", "Vector(0, 0, -1)", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, -2, 1)", "Vector(0, 0, 1)", new string[0])]
        [Xunit.InlineDataAttribute("Point(-1, 1, 0)", "Vector(-1, 0, 0)", new string[0])]
        public virtual void NormalVectorOnACylinder(string point, string normal, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Normal vector on a cylinder", null, exampleTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 32
 testRunner.Given("cylinder ← cylinder()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.When(string.Format("normalVector ← cylinder.LocalNormalAt({0})", point), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then(string.Format("normalVector = {0}", normal), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The default minimum and maximum for a cylinder")]
        [Xunit.TraitAttribute("FeatureTitle", "Cylinders")]
        [Xunit.TraitAttribute("Description", "The default minimum and maximum for a cylinder")]
        public virtual void TheDefaultMinimumAndMaximumForACylinder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The default minimum and maximum for a cylinder", null, ((string[])(null)));
#line 43
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 44
 testRunner.Given("cylinder ← cylinder()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
 testRunner.Then("cylinder.Minimum = -infinity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 46
 testRunner.And("cylinder.Maximum = infinity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Intersecting a constrained cylinder")]
        [Xunit.TraitAttribute("FeatureTitle", "Cylinders")]
        [Xunit.TraitAttribute("Description", "Intersecting a constrained cylinder")]
        [Xunit.InlineDataAttribute("Point(0, 1.5, 0)", "Vector(0.1, 1, 0)", "0", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, 3, -5)", "Vector(0, 0, 1)", "0", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, 0, -5)", "Vector(0, 0, 1)", "0", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, 2, -5)", "Vector(0, 0, 1)", "0", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, 1, -5)", "Vector(0, 0, 1)", "0", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, 1.5, -2)", "Vector(0, 0, 1)", "2", new string[0])]
        public virtual void IntersectingAConstrainedCylinder(string point, string direction, string count, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Intersecting a constrained cylinder", null, exampleTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 49
 testRunner.Given("cylinder ← cylinder()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
 testRunner.And("cylinder.Minimum ← 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.And("cylinder.Maximum ← 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.And(string.Format("direction ← {0}.Normalize()", direction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.And(string.Format("ray ← Ray({0}, direction)", point), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.When("intersections ← cylinder.LocalIntersect(ray)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.Then(string.Format("intersections.Count = {0}", count), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="The default closed value for a cylinder")]
        [Xunit.TraitAttribute("FeatureTitle", "Cylinders")]
        [Xunit.TraitAttribute("Description", "The default closed value for a cylinder")]
        public virtual void TheDefaultClosedValueForACylinder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The default closed value for a cylinder", null, ((string[])(null)));
#line 66
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 67
 testRunner.Given("cylinder ← cylinder()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 68
 testRunner.Then("cylinder.IsClosed = false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Intersecting the caps of a closed cylinder")]
        [Xunit.TraitAttribute("FeatureTitle", "Cylinders")]
        [Xunit.TraitAttribute("Description", "Intersecting the caps of a closed cylinder")]
        [Xunit.InlineDataAttribute("Point(0, 3, 0)", "Vector(0, -1, 0)", "2", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, 3, -2)", "Vector(0, -1, 2)", "2", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, 4, -2)", "Vector(0, -1, 1)", "2", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, 0, -2)", "Vector(0, 1, 2)", "2", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, -1, -2)", "Vector(0, 1, 1)", "2", new string[0])]
        public virtual void IntersectingTheCapsOfAClosedCylinder(string point, string direction, string count, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Intersecting the caps of a closed cylinder", null, exampleTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 71
 testRunner.Given("cylinder ← cylinder()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 72
 testRunner.And("cylinder.Minimum ← 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
 testRunner.And("cylinder.Maximum ← 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.And("cylinder.IsClosed ← true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.And(string.Format("direction ← {0}.Normalize()", direction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.And(string.Format("ray ← Ray({0}, direction)", point), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.When("intersections ← cylinder.LocalIntersect(ray)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 78
 testRunner.Then(string.Format("intersections.Count = {0}", count), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="The normal vector on a cylinder\'s end caps")]
        [Xunit.TraitAttribute("FeatureTitle", "Cylinders")]
        [Xunit.TraitAttribute("Description", "The normal vector on a cylinder\'s end caps")]
        [Xunit.InlineDataAttribute("Point(0, 1, 0)", "Vector(0, -1, 0)", new string[0])]
        [Xunit.InlineDataAttribute("Point(0.5, 1, 0)", "Vector(0, -1, 0)", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, 1, 0.5)", "Vector(0, -1, 0)", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, 2, 0)", "Vector(0, 1, 0)", new string[0])]
        [Xunit.InlineDataAttribute("Point(0.5, 2, 0)", "Vector(0, 1, 0)", new string[0])]
        [Xunit.InlineDataAttribute("Point(0, 2, 0.5)", "Vector(0, 1, 0)", new string[0])]
        public virtual void TheNormalVectorOnACylindersEndCaps(string point, string normal, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The normal vector on a cylinder\'s end caps", null, exampleTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 89
 testRunner.Given("cylinder ← cylinder()", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 90
 testRunner.And("cylinder.Minimum ← 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
 testRunner.And("cylinder.Maximum ← 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
 testRunner.And("cylinder.IsClosed ← true", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 93
 testRunner.When(string.Format("normalVector ← cylinder.LocalNormalAt({0})", point), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
 testRunner.Then(string.Format("normalVector = {0}", normal), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CylindersFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CylindersFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
